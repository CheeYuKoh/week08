name: CD - Deploy Backend (then Frontend)

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name: { description: 'AKS name', required: true }
      aks_resource_group: { description: 'RG name', required: true }
  workflow_run:
    workflows: ["CI - Test, Build & Push (Backend + Frontend)"]
    types: [completed]
    branches: [main]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.event.workflow_run?.outputs.image_tag || github.sha }}

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-backend-prod
  cancel-in-progress: false

jobs:
  deploy_backend:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      PRODUCT_API_IP: ${{ steps.capture.outputs.product_ip }}
      ORDER_API_IP: ${{ steps.capture.outputs.order_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:  ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group || secrets.AKS_RG }}" \
            --name "${{ github.event.inputs.aks_cluster_name || secrets.AKS_NAME }}" \
            --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update \
            --resource-group "${{ github.event.inputs.aks_resource_group || secrets.AKS_RG }}" \
            --name "${{ github.event.inputs.aks_cluster_name || secrets.AKS_NAME }}" \
            --attach-acr "${{ secrets.AZURE_ACR_NAME }}"

      - name: Deploy Config & Databases
        working-directory: k8s
        run: |
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Services with pinned images
        working-directory: k8s
        run: |
          # Patch images to the exact CI-built tag
          kubectl set image deploy/product-service-w08e1 product-service-container="${{ env.REGISTRY_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}" --record=true || true
          kubectl set image deploy/order-service-w08e1 order-service-container="${{ env.REGISTRY_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}" --record=true || true
          # If first time apply:
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for LoadBalancer IPs
        id: capture
        run: |
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "product_ip=$PRODUCT_IP" >> $GITHUB_OUTPUT
              echo "order_ip=$ORDER_IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for IPs"; exit 1

  deploy_frontend:
    needs: deploy_backend
    uses: ./.github/workflows/frontend-cd.yml
    with:
      product_api_ip: "http://${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}:8000"
      order_api_ip:   "http://${{ needs.deploy_backend.outputs.ORDER_API_IP }}:8001"
      aks_cluster_name: ${{ github.event.inputs.aks_cluster_name || secrets.AKS_NAME }}
      aks_resource_group: ${{ github.event.inputs.aks_resource_group || secrets.AKS_RG }}
